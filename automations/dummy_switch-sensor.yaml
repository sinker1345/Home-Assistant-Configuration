# This (trigger) has to happen, while condition(s) are true, to do stuff (action)

# Check for Idle status on HTPC
  - alias: Match TV Lights to HTPC State
    trigger:
     - platform: state
       entity_id: sensor.glances
    action:
      - service_template: >-
          {% if trigger.to_state.state == "Idle" or trigger.to_state.state == "In Use"%}
            homeassistant.turn_on
          {% else %}
            homeassistant.turn_off
          {% endif %}
        entity_id: switch.tv_lights_power

# Update Last Motion variable
  - alias: "Update Last Motion"
    trigger:
      - platform: state
        entity_id:  binary_sensor.living_room_motion, binary_sensor.dining_room_motion, binary_sensor.kitchen_motion
        to: 'on'
    action:
      - service: variable.set_variable
        data:
          variable: last_motion
          attributes_template: >
              {
                "history_1": "{{ variable.state }}",
                "history_2": "{{ variable.attributes.history_1 }}",
                "history_3": "{{ variable.attributes.history_2 }}"
              }
        data_template:
          value: "{{ trigger.to_state.attributes.friendly_name }}"

#Reset morning greeting dummy switch
  - alias: 'Reset Morning Routine Switch'
    trigger:
      platform: time
      at: '01:00:30'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: switch.morning_alert
          state: 'on'
    action:
      - service: switch.turn_off
        entity_id: switch.morning_alert

